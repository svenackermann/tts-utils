gmtools = {}

local function matchesFilter(info, filter)
  for k, v in pairs(filter) do
    if info[k] == nil or info[k] ~= v then
      return false
    end
  end
  return true
end

function gmtools.parseGmNotes(gmNotes)
  if gmNotes == nil or gmNotes == '' then
    return nil
  end
  local status, parsed = pcall(JSON.decode, gmNotes)
  if status then
    return parsed
  end
  return nil
end

function gmtools.parse(theObject)
  local gmNotes = theObject.getGMNotes()
  return gmtools.parseGmNotes(gmNotes)
end

function gmtools.getObjectsFromZone(zone_GUID, filter)
  local zoneObjects = getObjectFromGUID(zone_GUID).getObjects()
  if filter == nil then
    return zoneObjects
  end
  local filtered = {}
  for i, zoneObject in ipairs(zoneObjects) do
    local info = gmtools.parse(zoneObject)
    if info ~= nil then
      if matchesFilter(info, filter) then
        table.insert(filtered, zoneObject)
      end
    end
  end
  return filtered
end

function gmtools.getObjectsByType(zone_GUID, type)
  return gmtools.getObjectsFromZone(zone_GUID, {type = type})
end

function gmtools.countStackableObjectsInZone(zone_GUID, filter)
  local objects = gmtools.getObjectsFromZone(zone_GUID, filter)
  local count = 0
  for _, obj in ipairs(objects) do
    local quantity = obj.getQuantity()
    if quantity < 0 then
      -- not a stack
      quantity = 1
    end
    count = count + quantity
  end
  return count
end
